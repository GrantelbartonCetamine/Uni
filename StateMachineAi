using Unity.VisualScripting;
using UnityEditor;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations.Rigging;
using UnityEngine.Events;

public class Behavior : MonoBehaviour
{
    //State
    private enum State
    {
        Roaming,
        Chasing,
        HuntPlayer,
        Attacking,
        ShootLaser,
    }
    private State state;

    [Header("ActivateAi")]
    public bool ToggleAi = false;

    [Header("Decisions")]
    public bool GoRoaming = false;
    public bool PatroulRandomly = false; // Working 
    public bool SetDestinationManually = false;
    public bool ActivateHuntPlayer = false;

    [Header("WhenInRange")]
    public bool DoRunJumpAttack = false;           // unused for now
    public bool DoBackFlipOnWall = false;          // unused for now
    public bool DoHeroPose = false;                // unused for now
    public bool BoxPlayerOnGround = false;         // unused for now

    [Header("LetPlayerCry")]
    public bool CastLaser = false; // EndGoal : https://www.artstation.com/artwork/XBN4ZD or https://www.youtube.com/shorts/0r1qvNr2VpI

    [Header("SpeedVars")]
    public float LaserSpeed = 2f;
    public float EnemyVelocity = 0.0f;
    public float Acceleration = 0.1f;

    [Header("PatroulStats")]
    public float NegativeRndPosition = -10f;
    public float PositiveRndPosition = 10f;

    [Header("PatroulDestinations")]
    [SerializeField] public Transform[] EnemyDestination;
    public int DestinationIndex;

    [Header("Objects")]
    public GameObject LaserProjectile;
    private NavMeshAgent Enemy;
    [SerializeField] Transform EnemyTarget;

    [Header("Layers")]
    public LayerMask PlayerLayer = 1 << 10;

    [Header("Positions")]
    private Vector3 StartingPosition;

    [Header("Sizes")]
    public float RayCastSize = 20f;
    public float SeeRange = 10f;
    public float ShootRange = 10f;
    public float MeeleRange = 5f;

    [Header("Animations")]
    public Animator Animator;
    public float animationCoolDdown = 20f;
    private float timer = 0;
    private int animationIndex = -1;

    [Header("LaserComponents")]
    private RaycastHit LaserHit;
    [SerializeField] private LineRenderer LaserLineRenderer;
    [SerializeField] private float LaserDistance = 100f;
    [SerializeField] private LineRenderer IgnoreMask;
    [SerializeField] private UnityEvent OneHitTarget;
    public float FaceRaySize = 1.0f;
    public Transform FaceRayOrigin;
    public Transform FaceRayEnd;

    //https://gist.github.com/navarone77/1a67071194263c93c2b718882203cccd

    void Start()
    {
        StartingPosition = transform.position;
        int VelocityHash = Animator.StringToHash("Velocity");
    }

    private void Awake()
    {
        Enemy = GetComponent<NavMeshAgent>();
        Animator = GetComponent<Animator>();
        LaserLineRenderer.positionCount = 2;
    }
    void Update()
    {
        ActivateAi();
    }

    private void ActivateAi()
    {
        if (Input.GetKeyUp(KeyCode.Q))
        {
            ToggleAi = !ToggleAi;
            Debug.Log("Activate Ai : " + ToggleAi);
        }

        else if (ToggleAi)
        {
            StateMachine();

        }
        else if (!ToggleAi)
        {
            InteruptAll();
        }

    }
    private void StateMachine()
    {
        bool playerInSight = Physics.CheckSphere(transform.position, SeeRange, PlayerLayer);
        bool playerInAttackRange = Physics.CheckSphere(transform.position, ShootRange, PlayerLayer);

        if (!playerInAttackRange && !playerInSight && ToggleAi)
        {

            state = State.Roaming;
        }

        if (ActivateHuntPlayer && ToggleAi)
        {
            state = State.HuntPlayer;
        }
            
        if (playerInSight && !playerInAttackRange && ToggleAi)
        {
            state = State.Chasing;
        }

        if (playerInSight && playerInAttackRange && ToggleAi)
        {
            state = State.Attacking;
        }

        if (CastLaser && ToggleAi)
        {
            state = State.ShootLaser;
        }

        switch (state)
        {

            case State.Roaming:

                if (SetDestinationManually)
                {
                    if (EnemyDestination.Length == 0)
                    {
                        ToggleAi = false;
                        Debug.Log("No PatroulPoints were given Deactivate Ai: " + ToggleAi);
                    }
                }

                else if (GoRoaming && ToggleAi)
                {
                    SetDestination();
                }

                else if (PatroulRandomly && ToggleAi)
                {
                    RandomPatrouling();
                }

                else
                {
                    DoAnimations();
                }

                break;

            case State.Chasing:
                Debug.Log("Chase Player");
                Chasing();
                break;

            case State.HuntPlayer:
                Debug.Log("Chase Player on Map");
                HuntPlayer();
                break;

            case State.Attacking:
                Debug.Log("Attack Player");
                Attacking();
                break;

            case State.ShootLaser:
                ShootLaser();
                break;
        }
        DoAnimations();
    }

    private void DoAnimations()
    {
        EnemyVelocity = Enemy.velocity.magnitude;
        Animator.SetFloat("Velocity", EnemyVelocity);

        if (EnemyVelocity < 0.1f)
        {
            timer -= Time.deltaTime;

            if (timer >= animationCoolDdown)
            {
                animationIndex = Random.Range(0, 3);
                timer = 0f;
            }

            animationCoolDdown += Time.deltaTime;

            if (animationIndex == 0)
            {
                HandleAnimations(attack: false, idle: false, walking: false, breakDance: true, doFreezeAnimations: false);
            }

            else if (animationIndex == 1)
            {
                HandleAnimations(attack: false, idle: false, walking: false, breakDance: false, doFreezeAnimations: true);
            }

            else if (animationIndex == 2)
            {
                HandleAnimations(attack: false, idle: true, walking: false, breakDance: false, doFreezeAnimations: false);
            }

        }
        else if (state == State.Chasing || state == State.Roaming)
        {
            HandleAnimations(attack: false, idle: false, walking: true, breakDance: false, doFreezeAnimations: false);
        }
        else if (state == State.Attacking)
        {
            HandleAnimations(attack: true, idle: false, walking: true, breakDance: false, doFreezeAnimations: false);
        }
    }

    public void HandleAnimations(bool attack, bool idle, bool walking, bool breakDance, bool doFreezeAnimations)
    {
        Animator.SetBool("IsAttacking", attack);
        Animator.SetBool("IsIdle", idle);
        Animator.SetBool("IsWalking", walking);
        Animator.SetBool("DoBreakDance", breakDance);
        Animator.SetBool("DoFreezeBreakDance", doFreezeAnimations);

    }

    private void InteruptAll()
    {
        Debug.Log("Ai ist Deactivated");
       // Enemy.transform.position = Vector3.zero;  
    }

    private float GetDistance(Transform destination1 ,  Transform destination2)
    {
        return Vector3.Distance(destination1.position, destination2.position);
    }

    private void SetDestination()
    {
        Transform destination2 = EnemyDestination[DestinationIndex];    
        float distance =  GetDistance(destination1 : Enemy.transform, destination2 : destination2);

        if (distance < 0.2f)
        {
            DestinationIndex = (DestinationIndex + 1) % EnemyDestination.Length;

            Vector3 destination = EnemyDestination[DestinationIndex].transform.position;

            Enemy.SetDestination(destination);
        }
    }

    private void RandomPatrouling()
    {
        if (Enemy.remainingDistance < 0.1f)
        {
            Vector3 randomPosition = StartingPosition + new Vector3(

            UnityEngine.Random.Range(NegativeRndPosition, PositiveRndPosition),
            0,
            UnityEngine.Random.Range(NegativeRndPosition, PositiveRndPosition)

        );


            if (NavMesh.SamplePosition(randomPosition, out NavMeshHit hit, 2.0f, NavMesh.AllAreas))
            {
                Enemy.SetDestination(hit.position);
                Debug.Log("New patrol point: " + hit.position);

            }
        }
    }
    private void Chasing()
    {

        float distance = Vector3.Distance(EnemyTarget.position, Enemy.transform.position);
        Debug.Log("Distance between Player and horde is : " + distance);

        Enemy.destination = EnemyTarget.position;
        transform.LookAt(EnemyTarget.transform.position);

    }

    private void HuntPlayer()
    {
        Enemy.SetDestination(EnemyTarget.position);
    }

    private void Attacking()
    {
        Ray ray = new Ray(FaceRayOrigin.transform.position, Enemy.transform.forward);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, RayCastSize))
        {
            Debug.DrawRay(ray.origin, ray.direction * RayCastSize, Color.red);
            Debug.Log("ray hit object : " + hit.collider.gameObject.name);

            if (hit.distance < ShootRange)
            {
                if (LaserHit.collider.gameObject.layer == LayerMask.NameToLayer("Player"))
                    ShootProjectile();
            }

            if (hit.distance < MeeleRange)
            {
                MeeleAttack();
            }

        }
        else
        {
            Debug.DrawRay(ray.origin, ray.direction * RayCastSize, Color.red);
            Debug.Log("Nothing in Front.");
        }
    }

    private void CheckFront()
    {

        Ray ray = new Ray(FaceRayOrigin.transform.position, Enemy.transform.forward);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, RayCastSize))
        {
            Debug.DrawRay(ray.origin, ray.direction * RayCastSize, Color.red);
            Debug.Log("ray hit object : " + hit.collider);

            if (hit.distance < ShootRange)
            {
                ShootProjectile();
            }

            if (hit.distance < MeeleRange)
            {
                MeeleAttack();
            }
        }

        else
        {
            Debug.DrawRay(ray.origin, ray.direction * RayCastSize, Color.red);
            Debug.Log("Nothing in Front.");
        }
    }
    private void ShootProjectile()
    {
        GameObject laserobj = Instantiate(LaserProjectile, transform.position, Quaternion.identity);
        Rigidbody rb = LaserProjectile.GetComponent<Rigidbody>();
        rb.velocity = (EnemyTarget.position - transform.position).normalized * LaserSpeed;
    }

    private void ShootLaser()
    {
        Vector3 laserDdirection = (FaceRayEnd.transform.position - FaceRayOrigin.transform.position).normalized;

        Ray ray = new Ray(FaceRayOrigin.transform.position, laserDdirection);
        Debug.DrawRay(ray.origin, ray.direction * FaceRaySize, Color.red);

        if (Physics.Raycast(ray, out LaserHit , FaceRaySize))
        {
            LaserLineRenderer.SetPosition(0 , FaceRayOrigin.transform.position);
            LaserLineRenderer.SetPosition(1, LaserHit.collider ? LaserHit.point : FaceRayEnd.transform.position);

            if (LaserHit.collider.gameObject.layer == LayerMask.NameToLayer("Player"))
            {
               Debug.Log("Player got hit and looses Life");
            }
            else
            {
                LaserLineRenderer.SetPosition(0, FaceRayOrigin.position);
                LaserLineRenderer.SetPosition(1, FaceRayEnd.position);
            }
        }
    }

    private void MeeleAttack()
    {
        CheckFront();
    }

    public void OnTriggerEnter(Collider other)
    {
        if (other.transform == EnemyTarget)
        {
            Debug.Log("Horde Collide with : " + other);
        }
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, ShootRange);

        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, SeeRange);

        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, MeeleRange);
    }
}
